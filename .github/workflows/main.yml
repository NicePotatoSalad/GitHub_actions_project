name: Pipeline

on:
  push:
    branches:
      - advanced_pipeline_implem
  pull_request:
    branches:
      - advanced_pipeline_implem

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build application 
        run: echo "Simulating application build..." && mkdir -p build && echo "App version 1.0.0" > build/my_app_info.txt
      - name: Upload application build artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-build
          path: build/

  api_and_unit_tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run Unit and API Tests with PYTHONPATH # * Changed step name for clarity
        run: |
          # 1. Set the PYTHONPATH environment variable for this shell session.
          #    '.' refers to the current working directory, which is the repository root.
          export PYTHONPATH=$PYTHONPATH:. 
          
          # 2. (Optional but good practice): Create the reports directory if it doesn't exist.
          mkdir -p reports/ 
          
          # 3. Now run pytest. It will use the PYTHONPATH from this same shell.
          pytest tests/unit/ --junitxml=reports/unit_results.xml
          pytest tests/api/ --junitxml=reports/api_results.xml


      - name: Upload Unit/API Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: unit-api-test-reports
          path: reports/
          if-no-files-found: ignore
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download build artifact from build step
        uses: actions/download-artifact@v4
        with:
          name: application-build
          path: build/
      - name: Deploy to staging environment
        run: echo Deploy to staging environment

  E2E_tests:
    runs-on: ubuntu-latest
    needs: deploy
    # This job will ONLY run if:
    # 1. The event that triggered the workflow is 'workflow_dispatch' (manual run)
    # 2. AND the 'run_e2e_tests' input for that manual run was set to 'true'
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30 # Set a timeout for long-running E2E tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run E2E Tests with PYTHONPATH # Changed step name for clarity
        run: |
          # 1. Set the PYTHONPATH environment variable for this shell session.
          #    '.' refers to the current working directory, which is the repository root.
          export PYTHONPATH=$PYTHONPATH:. 
          
          # 2. (Optional but good practice): Create the reports directory if it doesn't exist.
          mkdir -p reports/ 
          
          # 3. Now run pytest. It will use the PYTHONPATH from this same shell.
          pytest tests/ui/ --junitxml=reports/ui_results.xml -n auto
      - name: Upload E2E Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: e2e-reports
          path: reports/
          if-no-files-found: ignore
      

  publish_report:
    runs-on: ubuntu-latest
    needs: [api_and_unit_tests, E2E_tests]
    if: always()
    steps:
      - name: Download Unit/API Test Reports
        uses: actions/download-artifact@v4
        with:
          name: unit-api-test-reports
          path: downloaded_reports/unit-api/
          
      - name: Download E2E Test Reports
        # This makes sure this step only runs if the job it 'needs' ran
        if: ${{ needs.E2E_tests.result != 'skipped' }}
        uses: actions/download-artifact@v4
        with:
          name: e2e-reports
          path: downloaded_reports/e2e/
      
      - name: Generate Allure Report
        run: |
          echo "Generating comprehensive Allure report..."
          ls -R downloaded_reports/
          mkdir -p allure-report
          echo "Allure report placeholder generated." > allure-report/index.html

      - name: Upload Allure Report (as artifact for Browse)
        uses: actions/upload-artifact@v4
        with:
          name: allure-html-report
          path: allure-report/

      - name: Send Slack Notification
        run: echo "Sending Slack notification about pipeline status."
  deploy_to_production:
    runs-on: ubuntu-latest
    needs: [E2E_tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production # ? Why do i do that again?
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Production
        run: echo "Deploying app to Production environment!"
